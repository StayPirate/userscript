// ==UserScript==
// @name        Bugzilla - Add SUSE CVE page link
// @namespace   SUSE SecTools
// @match       https://bugzilla.suse.com/show_bug.cgi?*
// @match       https://bugzilla.opensuse.org/show_bug.cgi?*
// @run-at      document-end
// @grant       none
// @version     1.0.2
// @author      gsonnu
// @description Add links to SUSE CVE pages in title and comments
// ==/UserScript==


(function() {
    const cveRegex = /CVE-[0-9]{4}-[0-9]*/gi;

    // title & alias
    replaceCveWithUrls(document.querySelector('#alias_nonedit_display'));
    replaceCveWithUrls(document.querySelector('#short_desc_nonedit_display'));

    // comments
    document.querySelectorAll('.bz_comment_text').forEach(replaceCveWithUrls);


    function createAnchor(url, text) {
        let link = document.createElement('a');
        link.setAttribute('href', url);
        link.textContent = text;

        return link;
    }

    function createTextNode(text) {
        if (text == null || typeof(text) === 'undefined')
            return null;

        return document.createTextNode(text);
    }

    function replaceText(elem) {
        let text = elem.textContent;
        let parent = elem.parentNode;
        let index = 0;
        let r = null;

        while (r = cveRegex.exec(text)) {
            // add text before, if any
            parent.insertBefore(createTextNode(text.slice(index, r.index)), elem);

            // add CVE as link
            parent.insertBefore(createAnchor(`https://www.suse.com/security/cve/${r[0]}.html`, r[0]),
                                elem);

            // update index
            index = r.index + r[0].length;
        }

        // no substitutions were made, return
        if (index === 0)
            return;

        // add remaining text, if any
        if (index < (text.length - 1))
            parent.insertBefore(createTextNode(text.slice(index)), elem);

        parent.removeChild(elem);
    }

    function replaceCveWithUrls(elem) {
        if (!elem)
            return;

        // only replace text in text nodes
        Array.from(elem.childNodes).filter((x) => x.nodeType === 3).forEach(replaceText);
    }

})();
