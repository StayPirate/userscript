#! /usr/bin/env -S bash -i

repodir="$(git rev-parse --show-toplevel)"

trim() {
    sed 's/^[ \t]*//g; s/[ \t]*$//g' <<< "$1"
}

find_files() {
    local dir="$1"
    local name="$2"

    find "${repodir}/${dir}" -type f -name "${name}" 2>/dev/null | LANG=C sort -g
}


find_rel_files() {
    find_files "$@" | sed "s#^${repodir}/##g"
}


get_images() {
    local name="$(basename "$1" ".user.js")"
    find_rel_files "images" "${name}*"
}


get_docs() {
    local name="$(basename "$1" ".user.js")"
    find_files "docs/script" "${name}*.md"
}


get_field() {
    local file="$1"
    local field="$2"
    local value="$(grep -o "@${field}.*" "$file")"

    trim "${value/@${field}/}"
}


get_version() {
    local ver="$(get_field "$1" "version")"
    printf "Last version: %s\n\n" "$ver"
}


get_description() {
    local desc="$(get_field "$1" "description")"

    printf '%s\n' "${desc%.}."

    local docs="$(get_docs "$1")"

    if test -n "$docs"
    then
        for d in $docs
        do
            printf "\n"
            cat "$d"
        done
    fi
}

print_script_entry() {
    local script="$1"
    local file="$2"

    printf '### [%s](%s)\n\n' "$script" "$file"

    get_version "$file"
    get_description "$file"

    local images="$(get_images "$script")"

    if test -n "$images"
    then
        printf '\n#### Screenshots\n'

        for i in $images
        do
            printf '\n![](%s)\n' "$i"
        done
    fi

}


print_script_section() {
    printf '## %s\n\n' "$1"
}


print_scripts() {
    script_foreach "$1" print_script_section print_script_entry
}


print_toc_entry() {
    local script="$1"
    printf -- '  - [%s](#%s)' "$script" "${script,,}"
}

print_toc_section() {
    local section="$1"
    printf -- '- [%s](#%s)\n' "$1" "${1,,}"
}


print_toc() {
    printf '\n## Table of Contents\n'
    script_foreach "$1" print_toc_section print_toc_entry
    printf '\n'
}


script_foreach() {
    local scripts="$1"
    local on_section_change="$2"
    local f="$3"
    local current_section=""

    for file in $scripts
    do
        printf '\n'

        local section="$(dirname "$file")"
        local script="$(basename "$file")"

        if test "$section" != "$current_section"
        then
            current_section="$section"
            "$on_section_change" "$section"
        fi

        $f "$script" "$file"
    done
}


generate_scripts_docs() {
    printf '# Userscripts\n'

    local scripts="$(find_rel_files "" '*.user.js')"



    local current_section=""

    print_toc "$scripts"
    print_scripts "$scripts"
    return

    for file in $scripts
    do
        printf '\n'

        local section="$(dirname "$file")"
        local script="$(basename "$file")"

        if test "$section" != "$current_section"
        then
            printf '## %s\n\n' "$section"
            current_section="$section"
        fi

        printf '### [%s](%s)\n\n' "$script" "$file"

        get_version "$file"
        get_description "$file"

        local images="$(get_images "$script")"

        if test -n "$images"
        then
            printf '\n#### Screenshots\n'

            for i in $images
            do
                printf '\n![](%s)\n' "$i"
            done
        fi

    done
}

generate_readme() {
    generate_scripts_docs
    local docs="$(find_files "docs/general" "*.md")"

    for d in $docs
    do
        printf "\n"
        cat "$d"
    done
}

generate_readme > "${repodir}/README.md"
git add "${repodir}/README.md"
